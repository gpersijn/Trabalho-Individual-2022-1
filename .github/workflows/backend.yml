# This is a basic workflow to help you get started with Actions
name: backend-CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: Build back
    runs-on: ubuntu-latest  
    env: 
      working-directory: ./library_back
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      
      # Runs a set of commands using the runners shell
      - name: Container backend up
        working-directory:  ${{env.working-directory}}
        run: docker-compose up --build -d
        
  # Tests
  test: 
    # Runs a single command using the runners shell
    name: Backend tests
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.10.4]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    # Runs a set of commands using the runners shell
    - name: Setting dependencies
      working-directory: ./library_back
      run: |
        pwd && python3 -m venv env
        . env/bin/activate
        pip install -r requirements.txt
    - name: Pytests
      working-directory: ./library_back
      run: |
        pip install pytest && pip install pytest-cov
        pytest tests.py --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html
        
